// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.17.3
// source: aop.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AopTestClient is the client API for AopTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AopTestClient interface {
	Hello(ctx context.Context, in *CheckResultReq, opts ...grpc.CallOption) (*CheckResultResp, error)
	Hello2(ctx context.Context, in *CheckResultReq, opts ...grpc.CallOption) (*CheckResultResp, error)
}

type aopTestClient struct {
	cc grpc.ClientConnInterface
}

func NewAopTestClient(cc grpc.ClientConnInterface) AopTestClient {
	return &aopTestClient{cc}
}

func (c *aopTestClient) Hello(ctx context.Context, in *CheckResultReq, opts ...grpc.CallOption) (*CheckResultResp, error) {
	out := new(CheckResultResp)
	err := c.cc.Invoke(ctx, "/TsepContent.AopTest/hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aopTestClient) Hello2(ctx context.Context, in *CheckResultReq, opts ...grpc.CallOption) (*CheckResultResp, error) {
	out := new(CheckResultResp)
	err := c.cc.Invoke(ctx, "/TsepContent.AopTest/hello2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AopTestServer is the server API for AopTest service.
// All implementations must embed UnimplementedAopTestServer
// for forward compatibility
type AopTestServer interface {
	Hello(context.Context, *CheckResultReq) (*CheckResultResp, error)
	Hello2(context.Context, *CheckResultReq) (*CheckResultResp, error)
	mustEmbedUnimplementedAopTestServer()
}

// UnimplementedAopTestServer must be embedded to have forward compatible implementations.
type UnimplementedAopTestServer struct {
}

func (UnimplementedAopTestServer) Hello(context.Context, *CheckResultReq) (*CheckResultResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedAopTestServer) Hello2(context.Context, *CheckResultReq) (*CheckResultResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello2 not implemented")
}
func (UnimplementedAopTestServer) mustEmbedUnimplementedAopTestServer() {}

// UnsafeAopTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AopTestServer will
// result in compilation errors.
type UnsafeAopTestServer interface {
	mustEmbedUnimplementedAopTestServer()
}

func RegisterAopTestServer(s grpc.ServiceRegistrar, srv AopTestServer) {
	s.RegisterService(&AopTest_ServiceDesc, srv)
}

func _AopTest_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AopTestServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TsepContent.AopTest/hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AopTestServer).Hello(ctx, req.(*CheckResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AopTest_Hello2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AopTestServer).Hello2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TsepContent.AopTest/hello2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AopTestServer).Hello2(ctx, req.(*CheckResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AopTest_ServiceDesc is the grpc.ServiceDesc for AopTest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AopTest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TsepContent.AopTest",
	HandlerType: (*AopTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "hello",
			Handler:    _AopTest_Hello_Handler,
		},
		{
			MethodName: "hello2",
			Handler:    _AopTest_Hello2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aop.proto",
}
